<?php

/**
 * @file
 * Verifies if user is a human without necessity to solve a CAPTCHA.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\turnstile\Turnstile\Drupal8Post;
use Drupal\turnstile\Turnstile\Turnstile;

/**
 * Implements hook_captcha().
 */
function turnstile_captcha($op, $captcha_type = '') {

  switch ($op) {
    case 'list':
      return ['Turnstile'];

    case 'generate':
      $captcha = [];
      if ($captcha_type == 'Turnstile') {
        $config = \Drupal::config('turnstile.settings');
        $renderer = \Drupal::service('renderer');
        $turnstile_keys = turnstile_keys();
        $turnstile_site_key = $turnstile_keys['site_key'];
        $turnstile_secret_key = $turnstile_keys['secret_key'];

        if (!empty($turnstile_site_key) && !empty($turnstile_secret_key)) {
          $attributes = [
            'class' => 'cf-turnstile',
            'data-sitekey' => $turnstile_site_key,
            'data-theme' => $config->get('widget.theme'),
            'data-size' => $config->get('widget.size'),
            'data-language' => $config->get('widget.language'),
            'data-retry' => $config->get('widget.retry'),
            'data-retry_interval' => $config->get('widget.retry_interval'),
            'data-appearance' => $config->get('widget.appearance'),
            'data-tabindex' => $config->get('widget.tabindex'),
          ];

          $turnstile = new Turnstile($turnstile_site_key, $turnstile_secret_key, $attributes);
          $captcha = $turnstile->getWidget('turnstile_captcha_validation');
        }
        else {
          // Fallback to Math captcha as Turnstile is not configured.
          $captcha = captcha_captcha('generate', 'Math');
        }

        // If module configuration changes the form cache need to be refreshed.
        $renderer->addCacheableDependency($captcha['form'], $config);
      }
      return $captcha;
  }
}

/**
 * CAPTCHA Callback; Validates the Turnstile code.
 */
function turnstile_captcha_validation($solution, $response, $element, $form_state) {
  $turnstile_keys = turnstile_keys();
  $turnstile_site_key = $turnstile_keys['site_key'];
  $turnstile_secret_key = $turnstile_keys['secret_key'];

  if (!\Drupal::request()->get('cf-turnstile-response') || empty(\Drupal::request()->get('cf-turnstile-response')) || empty($turnstile_secret_key)) {
    return FALSE;
  }

  $captcha = new Turnstile($turnstile_site_key, $turnstile_secret_key, [], new Drupal8Post());
  $captcha->validate(\Drupal::request()->get('cf-turnstile-response'), \Drupal::request()->getClientIp());

  if ($captcha->isSuccess()) {
    // Verified!
    return TRUE;
  }
  else {
    foreach ($captcha->getErrors() as $error) {
      \Drupal::logger('turnstile')->error('@error', ['@error' => $error]);
    }
  }
  return FALSE;
}

/**
 * Implements hook_help().
 */
function turnstile_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {

    case 'help.page.turnstile':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= t("<p>Cloudflare Turnstile delivers frustration-free, CAPTCHA-free web experiences to website visitors - with just a simple snippet of free code.</p><p>What's more, Turnstile stops abuse and confirms visitors are real without the data privacy concerns or awful UX that CAPTCHAs thrust on users.</p>");

      // Add a link to the Drupal.org project.
      $output .= '<p>';
      $output .= t('Visit the <a href=":project_link">Turnstile project page</a> on Drupal.org for more information.', [
        ':project_link' => 'https://www.drupal.org/project/turnstile',
      ]);
      $output .= '</p>';

      return $output;

    default:
  }
}

/**
 * Implements hook_library_info_build().
 */
function turnstile_library_info_build() {
  $config = \Drupal::config('turnstile.settings');
  $turnstile_src = $config->get('turnstile_src');

  $libraries = [];

  $libraries['turnstile.remote'] = [
    'js' => [
      $turnstile_src => [
        'type' => 'external',
        'attributes' => [
          'defer' => TRUE,
          'async' => TRUE,
        ],
        'minified' => TRUE,
      ],
    ],
  ];

  return $libraries;
}

/**
 * Returns the site and secret keys.
 */
function turnstile_keys() {
  $config = \Drupal::config('turnstile.settings');

  // If the test keys are present, override the production keys.
  $testing_site_key = $config->get('testing_site_key');
  $testing_secret_key = $config->get('testing_secret_key');

  if (!empty($testing_site_key) && !empty($testing_secret_key)) {
    return [
      'site_key' => $testing_site_key,
      'secret_key' => $testing_secret_key,
    ];
  }

  $keys = FALSE;

  // Let's do a quick reality check; if the Key module hasn't been added,
  // pulling the keys will throw an error (of course).
  if (\Drupal::moduleHandler()->moduleExists('key')) {
    $keys = \Drupal::service('key.repository')->getKey($config->get('keys'));
  }

  if ($keys) {
    return $keys->getKeyValues();
  }
  else {
    return [
      'site_key' => '',
      'secret_key' => '',
    ];
  }
}
